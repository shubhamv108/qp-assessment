apiVersion: v1
kind: Namespace
metadata:
  name: grocery-booking
  labels:
    name: grocery-booking
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grocery-booking
  namespace: grocery-booking
  labels:
    app: grocery-booking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grocery-booking
#  updateStrategy:
#    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grocery-booking
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
        - name: grocery-booking
          image: shubham01/grocery-booking:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            timeoutSeconds: 120
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            timeoutSeconds: 90
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: spring.datasource.url
              value: jdbc:mysql://mysql.grocery-booking-mysql.svc:3306/grocery-booking?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
            - name: spring.datasource.username
              value: root
            - name: spring.datasource.password
              value: root1234
            - name: spring.kafka.bootstrap-servers
              value: kafka-cluster.kafka.svc:9092
---
apiVersion: v1
kind: Service
metadata:
  name: grocery-booking
  namespace: grocery-booking
spec:
  selector:
    app: grocery-booking
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grocery-booking
  namespace: grocery-booking
spec:
  rules:
    - http:
        paths:
          - path: /grocery-booking/*
            pathType: Prefix
            backend:
              service:
                name: grocery-booking
                port:
                  number: 80

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: grocery-booking-monitor
  namespace: grocery-booking
  labels:
    release: prometheus-operator
spec:
  selector:
    matchLabels:
      app: grocery-booking
  endpoints:
    - port: http-traffic
      path: "/actuator/prometheus"
---